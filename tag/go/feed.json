{
    "version": "https://jsonfeed.org/version/1",
    "title": "love hack • All posts by \"go\" tag",
    "description": "",
    "home_page_url": "https://pr0phet1.github.io",
    "items": [
        {
            "id": "https://pr0phet1.github.io/2025/07/30/go-reflect/",
            "url": "https://pr0phet1.github.io/2025/07/30/go-reflect/",
            "title": "go-reflect",
            "date_published": "2025-07-30T11:17:09.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>go 语音作为一门编译型语言，无需任何依赖环境，并由于其优良的并发性和强大的原生包，我们安全开发选择 go 语言作为主语言，是一个不错的选择</p>\n<h1 id=\"reflect\"><a class=\"anchor\" href=\"#reflect\">#</a> reflect</h1>\n<h2 id=\"基础理解\"><a class=\"anchor\" href=\"#基础理解\">#</a> 基础理解</h2>\n<p>在 reflect 中有两个重要函数和相应的类型</p>\n<ul>\n<li>ValueOf  ----  value</li>\n<li>TypeOf   ----  type</li>\n</ul>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"type\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(a)</span><br><span class=\"line\">\ttypeOf := reflect.TypeOf(a)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(of, typeOf)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n%T&quot;</span>, of, typeOf)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"image-20250731085325108.png\" alt=\"image-20250731085325108\"></p>\n<p>可以看到输出结果，输出结果和类型</p>\n<p>他们本身也有各自的调用方法，我这里只举例一些常用的</p>\n<p>reflect.Value.Type()</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"type\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(a)</span><br><span class=\"line\">\tfmt.Println(of.Type())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：main.yuanshen</span></span><br></pre></td></tr></table></figure></p>\n<p>获取数据定义类型名</p>\n<p>reflect.Value.Kind()</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a yuanshen = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(a)</span><br><span class=\"line\">\tfmt.Println(of.Kind())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：int</span></span><br></pre></td></tr></table></figure></p>\n<p>获取数据底层类型名称</p>\n<p>reflect.Value.Elem()</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a yuanshen = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(&amp;a)</span><br><span class=\"line\">    fmt.Println(of)</span><br><span class=\"line\">\tfmt.Println(of.Elem())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：0xc00010c0a8</span></span><br><span class=\"line\"><span class=\"comment\">//\t   100</span></span><br></pre></td></tr></table></figure></p>\n<p>这里我们 ValueOf 获取的是 a 的地址值，因此输出的是 a 指针的反射值，这里我们调用 Elem 获取的才是 a 指针指向的值的反射值</p>\n<p>reflect.Value.Canset()</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a yuanshen = <span class=\"number\">100</span></span><br><span class=\"line\">\tvalueOf := reflect.ValueOf(a)</span><br><span class=\"line\">\tof := reflect.ValueOf(&amp;a)</span><br><span class=\"line\">\tfmt.Println(valueOf.CanSet())</span><br><span class=\"line\">\tfmt.Println(of.CanSet())</span><br><span class=\"line\">\tfmt.Println(of.Elem().CanSet())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出： false</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tfalse</span></span><br><span class=\"line\"><span class=\"comment\">//\t\ttrue</span></span><br></pre></td></tr></table></figure></p>\n<p>函数作用就是检验这个反射值是否我们可以修改</p>\n<p>第一个 false 是因为我们获得是 a 的拷贝值，进行修改也无法修改 a 本身的值</p>\n<p>第二个 false 是因为我们取得是 a 的指针的反设值，进行修改相当于改地址，而不是改值</p>\n<p>第三个 true 是因为我们获取的是 a 的指针指向的值得反射值</p>\n<p>reflect.Indirect()</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    of := reflect.ValueOf(&amp;a)</span><br><span class=\"line\">    indirect := reflect.Indirect(of)</span><br><span class=\"line\">    fmt.Println(of.CanSet())</span><br><span class=\"line\">    fmt.Println(indirect.CanSet())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出： false</span></span><br><span class=\"line\"><span class=\"comment\">//\t\ttrue</span></span><br></pre></td></tr></table></figure></p>\n<p>无需 Elem，直接根据指针反射值找寻到指针指向的值，可用于多级指针使用</p>\n<p>reflect.Value.Set()</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a yuanshen = <span class=\"number\">100</span></span><br><span class=\"line\">\tof := reflect.ValueOf(&amp;a)</span><br><span class=\"line\">\tof.Elem().SetInt(<span class=\"number\">200</span>)</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：200</span></span><br></pre></td></tr></table></figure></p>\n<p>设置新值</p>\n<p>reflect.Type.Elem()</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">\tof := reflect.TypeOf(a)</span><br><span class=\"line\">\tfmt.Println(of.Elem())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出：int</span></span><br></pre></td></tr></table></figure></p>\n<p>获取切片元素类型，接口，结构体同样使用</p>\n<h2 id=\"高级用法\"><a class=\"anchor\" href=\"#高级用法\">#</a> 高级用法</h2>\n<p>获取 struct 信息的一些方法：</p>\n<ul>\n<li>NumField () 获取结构体字段数量</li>\n<li>Field (i) 可以通过 i 字段索引来获取结构体字段信息，比如 Field (i).Name 获取字段名</li>\n<li>FieldByName (name) 通过 name 获取字段信息</li>\n<li>MethodByName () 获取的是与指定方法名相关联的反射方法</li>\n<li>Call () 实例化反射方法</li>\n</ul>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := yuanshen&#123;<span class=\"string\">&quot;paimeng&quot;</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">\tof := reflect.ValueOf(&amp;p)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> of.Elem().NumField() &#123;</span><br><span class=\"line\">\t\tfmt.Println(of.Elem().Field(i))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tof.MethodByName(<span class=\"string\">&quot;Sing&quot;</span>).Call([]reflect.Value&#123;reflect.ValueOf(<span class=\"string\">&quot;oh,baby&quot;</span>)&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出结果：paimeng</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t  3</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t  10</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t  及你太美oh,baby</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>reflect.SliceOf (t) 创建一个切片类型，其元素类型为 t</li>\n<li>reflect.MakeSlice () 创建一个指定类型的空切片</li>\n<li>reflect.New (t) 创建一个 t 类型实例，并返回指针</li>\n<li>reflect.Append (slice, newP2) 将新元素追加到切片</li>\n</ul>\n<p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := yuanshen&#123;<span class=\"string\">&quot;paimeng&quot;</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\tt := reflect.TypeOf(p)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建新切片</span></span><br><span class=\"line\">\tslice := reflect.MakeSlice(reflect.SliceOf(t), <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加元素到切片</span></span><br><span class=\"line\">\tnewP1 := reflect.New(t).Elem()</span><br><span class=\"line\">\tnewP1.FieldByName(<span class=\"string\">&quot;name&quot;</span>).SetString(<span class=\"string\">&quot;xinxin&quot;</span>)</span><br><span class=\"line\">\tnewP1.FieldByName(<span class=\"string\">&quot;age&quot;</span>).SetInt(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewP2 := reflect.New(t).Elem()</span><br><span class=\"line\">\tnewP2.FieldByName(<span class=\"string\">&quot;name&quot;</span>).SetString(<span class=\"string\">&quot;dalaoyang&quot;</span>)</span><br><span class=\"line\">\tnewP2.FieldByName(<span class=\"string\">&quot;age&quot;</span>).SetInt(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tslice = reflect.Append(slice, newP1)</span><br><span class=\"line\">\tslice = reflect.Append(slice, newP2)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历切片</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; slice.Len(); i++ &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;切片元素 %d: %+v\\n&quot;</span>, i, slice.Index(i).Interface())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出结果：\t切片元素 0: &#123;Name:xinxin Age:5&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t   切片元素 1: &#123;Name:dalaoyang Age:100&#125;</span></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "web",
                "go"
            ]
        }
    ]
}